objdump -D -b binary -m i8086 CLOCK.EXE > clock.asm

CLOCK.EXE:     формат файла binary


Дизассемблирование раздела .data:

00000000 <.data>:
   0:	4d                   	dec    %bp
   1:	5a                   	pop    %dx
   2:	ec                   	in     (%dx),%al
   3:	00 02                	add    %al,(%bp,%si)
   5:	00 02                	add    %al,(%bp,%si)
   7:	00 20                	add    %ah,(%bx,%si)
   9:	00 00                	add    %al,(%bx,%si)
   b:	00 ff                	add    %bh,%bh
   d:	ff 00                	incw   (%bx,%si)
	...
  17:	00 1e 00 00          	add    %bl,0x0
  1b:	00 01                	add    %al,(%bx,%di)
  1d:	00 11                	add    %dl,(%bx,%di)
  1f:	00 00                	add    %al,(%bx,%si)
  21:	00 15                	add    %dl,(%di)
	...
 1ff:	00 e9                	add    %ch,%cl
 201:	bb 00 00             	mov    $0x0,%bx
	...
 20c:	00 00                	add    %al,(%bx,%si)
 20e:	00 18                	add    %bl,(%bx,%si)
 210:	00 00                	add    %al,(%bx,%si)
 212:	00 03                	add    %al,(%bp,%di)
 214:	00 00                	add    %al,(%bx,%si)
 216:	00 22                	add    %ah,(%bp,%si)
 
 
 
 // Процедура обработки прерывания
 218:	fa                   	cli    // Запрет прерываний
 219:	2e fe 06 17 00       	incb   %cs:0x17 // Увеличение счетчика, запуск процедуры не чаше 1 раза в секуду
 21e:	2e 80 3e 17 00 14    	cmpb   $0x14,%cs:0x17
 224:	73 03                	jae    0x229
 226:	e9 91 00             	jmp    0x2ba
 229:	2e c6 06 17 00 00    	movb   $0x0,%cs:0x17
 22f:	fb                   	sti    // Разрешаем прерывания
 230:	60                   	pusha  // сохраним регистры в стек, и проведем инициализацию
 231:	06                   	push   %es
 232:	6a 00                	push   $0x0
 234:	07                   	pop    %es
 235:	bf 17 04             	mov    $0x417,%di
 238:	26 8a 05             	mov    %es:(%di),%al
 23b:	07                   	pop    %es
 23c:	24 10                	and    $0x10,%al
 23e:	0a c0                	or     %al,%al
 240:	75 02                	jne    0x244
 242:	eb 75                	jmp    0x2b9
 244:	06                   	push   %es
 245:	6a 00                	push   $0x0
 247:	07                   	pop    %es
 248:	bf 49 04             	mov    $0x449,%di
 24b:	26 8a 05             	mov    %es:(%di),%al
 24e:	07                   	pop    %es
 24f:	3c 03                	cmp    $0x3,%al
 251:	76 02                	jbe    0x255
 253:	eb 64                	jmp    0x2b9
 255:	b4 02                	mov    $0x2,%ah
 257:	cd 1a                	int    $0x1a // Запрос времени из api bios, время упаковано в двоично десятичный формат BSD
 259:	33 f6                	xor    %si,%si // разложим тетрады по регистрам, и выведем на экран
 25b:	2e 88 ac 0c 00       	mov    %ch,%cs:0xc(%si)
 260:	46                   	inc    %si
 261:	2e 88 8c 0c 00       	mov    %cl,%cs:0xc(%si)
 266:	46                   	inc    %si
 267:	2e 88 b4 0c 00       	mov    %dh,%cs:0xc(%si)
 26c:	33 f6                	xor    %si,%si
 26e:	33 c0                	xor    %ax,%ax
 270:	33 db                	xor    %bx,%bx
 272:	b9 03 00             	mov    $0x3,%cx
 275:	2e 8a a7 0c 00       	mov    %cs:0xc(%bx),%ah
 27a:	8a c4                	mov    %ah,%al
 27c:	43                   	inc    %bx
 27d:	c0 ec 04             	shr    $0x4,%ah
 280:	24 0f                	and    $0xf,%al
 282:	05 30 30             	add    $0x3030,%ax
 285:	2e 88 a4 03 00       	mov    %ah,%cs:0x3(%si)
 28a:	46                   	inc    %si
 28b:	2e 88 84 03 00       	mov    %al,%cs:0x3(%si)
 290:	46                   	inc    %si
 291:	2e c6 84 03 00 3a    	movb   $0x3a,%cs:0x3(%si)
 297:	46                   	inc    %si
 298:	e2 db                	loop   0x275
 29a:	2e c5 36 13 00       	lds    %cs:0x13,%si
 29f:	b9 08 00             	mov    $0x8,%cx
 2a2:	ba 48 00             	mov    $0x48,%dx
 2a5:	fc                   	cld    // Сброс флага
 2a6:	06                   	push   %es  
 2a7:	68 00 b8             	push   $0xb800
 2aa:	07                   	pop    %es // сегмент видеопамяти
 2ab:	bf 90 00             	mov    $0x90,%di
 2ae:	51                   	push   %cx
 2af:	ac                   	lods   %ds:(%si),%al
 2b0:	26 88 05             	mov    %al,%es:(%di)
 2b3:	47                   	inc    %di
 2b4:	47                   	inc    %di
 2b5:	59                   	pop    %cx
 2b6:	e2 f6                	loop   0x2ae
 2b8:	07                   	pop    %es
 2b9:	61                   	popa   // Восстановим регистры из стека
 2ba:	fb                   	sti    // Разрешаем прерывания, 
 2bb:	cd 61                	int    $0x61 // вызываем прерывание по цепочке
 2bd:	cf                   	iret    // Возврат из прерывания
 
 
 
 // Процедура установки обработчика прерывания
 2be:	fa                   	cli    // Запрет прерываний
 2bf:	b8 1c 35             	mov    $0x351c,%ax // DOS Fn 35H: дать вектор прерывания, AL = номер прерывания (1c - системный таймер) 
 2c2:	cd 21                	int    $0x21 // Вызов функции api dos
 2c4:	06                   	push   %es // ES:BX = адрес обработчика прерывания 
 2c5:	1f                   	pop    %ds
 2c6:	53                   	push   %bx
 2c7:	5a                   	pop    %dx
 2c8:	b8 61 25             	mov    $0x2561,%ax // DOS Fn 25H: установить вектор прерывания, AL = номер прерывания, DS:DX = вектор прерывания: адрес программы обработки прерывания 
 2cb:	cd 21                	int    $0x21
 2cd:	b8 1c 25             	mov    $0x251c,%ax 
 2d0:	2e c5 16 0f 00       	lds    %cs:0xf,%dx // Запишем адрес предыдущего вектора прерывания, по цепочке возвратов из прерывания
 2d5:	cd 21                	int    $0x21
 2d7:	fb                   	sti    // Разрешаем прерывания, дальше форк и выход
 2d8:	06                   	push   %es
 2d9:	6a 00                	push   $0x0
 2db:	07                   	pop    %es
 2dc:	bf 17 04             	mov    $0x417,%di
 2df:	26 c6 05 10          	movb   $0x10,%es:(%di)
 2e3:	07                   	pop    %es
 2e4:	b8 03 31             	mov    $0x3103,%ax
 2e7:	ba 20 00             	mov    $0x20,%dx
 2ea:	cd 21                	int    $0x21


Так если по памяти:
в 218 строке начинается вход в обработчик прерывания.
запрет прерываний
проверка счетчика чтобы раз в секунду срабатывала, иначе выход
сохранение регистров в стеке
потом обращение к биосу за текущим временем
там время в двоично десятичном упакованном формате
поэтому сдвигаем биты
потом выводим на экран при помощи апи доса вроде
далее восстанавливаем регистры из стека
разрешаем прерывания
и возврат из прерывания на строке 2bd
во как!) 165 байт в итоге
